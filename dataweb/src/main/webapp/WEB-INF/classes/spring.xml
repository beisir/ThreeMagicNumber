<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.1.xsd
        ">
    <task:annotation-driven/>
    <context:component-scan base-package="com.hc360.dataweb"/>
    <bean class="com.hc360.dataweb.util.SpringContextHolder"></bean>

    <context:property-placeholder location="classpath:config.properties"/>
    <!-- 启用Transactional注解 -->
    <tx:annotation-driven transaction-manager="txManager"/>

    <!-- 本项目的数据库配置 -->
    <!--<bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
            >

        <property name="driverClassName">
            <value>${db.driver}</value>
        </property>
        <property name="url">
            <value>${db.url}</value>
        </property>
        <property name="username">
            <value>${db.username}</value>
        </property>
        <property name="password">
            <value>${db.password}</value>
        </property>

        <property name="maxActive">
            <value>${jdbc.maxActive}</value>
        </property>
        <property name="maxIdle">
            <value>${jdbc.maxIdle}</value>
        </property>
        <property name="maxWait">
            <value>${jdbc.maxWait}</value>
        </property>

        <property name="validationQuery">
            <value>select 1 from dual</value>
        </property>
        <property name="testWhileIdle">
            <value>true</value>
        </property>
        <property name="testOnBorrow">
            <value>false</value>
        </property>
        <property name="timeBetweenEvictionRunsMillis">
            <value>30000</value>
        </property>
        <property name="minEvictableIdleTimeMillis">
            <value>1800000</value>
        </property>
    </bean>-->
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/behaviordb" />
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760" />
    </bean>
    <!-- 事务 -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- Spring的声明式事务管理 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
            <!--<tx:method name="find*" propagation="SUPPORTS" <tx:method name="get*" propagation="SUPPORTS" /> -->
            <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="select*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!-- 声明切入点 -->
    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(* com.hc360.*.serivce..*.*(..))"/>
    </aop:config>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 多个包以逗号或者分号分隔即可，因为可能饮用其他的jar包，里面也可能有com.hc360.*.dao所以不能用正则的配置，以免出现问题。 -->
        <property name="basePackage" value="com.hc360.dataweb.dao"/>
    </bean>



    <!-- 异常拦截AOP -->
    <!-- 日志切面类 -->
    <bean id="monitorAop" class="com.hc360.dataweb.util.MonitorAop"/>
    <!-- 第1步： AOP的配置 -->
    <aop:config>
        <!-- 第2步：配置一个切面 -->
        <aop:aspect id="monitorAspect" ref="monitorAop">
            <!-- 第3步：定义切入点,指定切入点表达式 -->
            <aop:pointcut id="allMethod"
                          expression="execution(* com.hc360.dataweb.controller.*.*(..))"/>
            <!-- 第4步：应用前置通知 -->
            <!--<aop:before method="before" pointcut-ref="allMethod" />-->
            <!-- 第4步：应用后置通知 -->
            <!--<aop:after-returning method="afterReturn" pointcut-ref="allMethod"/>-->
            <!-- 第4步：应用最终通知 -->
            <!--<aop:after method="after" pointcut-ref="allMethod"/>-->
            <!-- 第4步：应用抛出异常后通知 -->
           <!-- <aop:after-throwing method="afterThrowing" pointcut-ref="allMethod"/>-->
            <!-- 第4步：应用环绕通知 -->
            <aop:around method="doAround" pointcut-ref="allMethod" />
        </aop:aspect>
    </aop:config>
</beans>
